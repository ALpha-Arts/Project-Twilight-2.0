# Scope is character

# Specific #

character_is_twilights_friend = {
	OR = {
		has_variable = is_twilight
		has_variable = is_applejack
		has_variable = is_fluttershy
		has_variable = is_pinkie
		has_variable = is_rainbow
		has_variable = is_rarity
		has_variable = is_starlight
	}
}

# Event #

character_can_duel = {
	is_ruler = no
	NOR = {
		has_variable = plot_armor
		has_trait = cautious
	}
	age >= 18
}

# Culture Check #

character_is_typical_earth_pony = {
	exists = scope:character
	scope:character = {
		culture = cu:pony
		has_trait = trait_earth_pony
	}
}

character_is_typical_pegasus = {
	exists = scope:character
	scope:character = {
		culture = cu:pony
		has_trait = trait_pegasus
	}
}

character_is_typical_unicorn = {
	exists = scope:character
	scope:character = {
		culture = cu:pony
		has_trait = trait_unicorn
	}
}

character_is_crystal_earth_pony = {
	exists = scope:character
	scope:character = {
		culture = cu:crystal_pony
		has_trait = trait_earth_pony
	}
}

character_is_crystal_pegasus = {
	exists = scope:character
	scope:character = {
		culture = cu:crystal_pony
		has_trait = trait_pegasus
	}
}

character_is_crystal_unicorn = {
	exists = scope:character
	scope:character = {
		culture = cu:crystal_pony
		has_trait = trait_unicorn
	}
}

# Major Character #

## EQS ##

pony_twilight_base_trigger = {	#<<이건 트와일라잇 전용 조건
	exists = scope:character	#<<해당 캐릭터가 존재하고,
	scope:character = {	#<<그 캐릭터가
		is_ruler = yes	#<<지도자로 있으면서,
		#culture = cu:pony	#<<포니면서,
		OR = {
			#culture = cu:earth_pony
			#culture = cu:pegasus
			#culture = cu:unicorn
			#culture = cu:alicorn
			culture = cu:pony
			culture = cu:bat_pony
			culture = cu:crystal_pony
		}
		exists = c:EQS	#이퀘스트리아가 존재하고,
		OWNER = c:EQS	#해당 캐릭터가 이퀘스트리아에 위치해 있을경우, 즉 이퀘스트리아를 통치중인 포니 지도자를 트와일라잇이라고 인식하게 하는 임시 조건이 되는 것.
	}
}

pony_twilight_crown_trigger = {
	exists = scope:character
	scope:character = {
		owner = {
			# 레이어 효과 테스트용으로 실험용 디시전과 연동해서 만든 조건
			has_variable = lia_var_twilight_crown
		}
	}
}

character_twilightsparkle_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_twilight }
}

character_applejack_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_applejack }
}

character_fluttershy_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_fluttershy }
}

character_pinkiepie_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_pinkie }
}

character_rainbowdash_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_rainbow }
}

character_rarity_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_rarity }
}

character_starlightglimmer_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_starlight }
}

character_diamondtiara_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_diamondtia }
}

character_fancypants_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_fancypants }
}

character_neighsay_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_neighsay }
}

character_cadence_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_cadence }
}

character_shiningarmor_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_shining }
}

character_sandbar_trigger = {
	exists = scope:character
	scope:character = { has_variable = is_sandbar }
}

## Generic ##

character_historic_trigger = {
	exists = scope:character
	scope:character = {
		has_variable = has_historical_traits
	}
}

# Generic #

## Marriage ##

trigger_character_is_married = {
	trigger_if = {
		limit = {
			exists = this
		}
		custom_tooltip = {
			text = trigger_character_is_married_tt
			OR = {
				has_variable = is_married
				has_variable = scope_var_significant_other
			}
		}
	}
	trigger_else = {
		custom_tooltip = {
			text = trigger_character_is_married_invalid_tt
			always = no
		}
	}
}

# Returns whether the chracter is married to CHARACTER_OTHER or not
trigger_character_is_married_to = {
	# Parameters
	$CHARACTER_OTHER$ = {
		save_temporary_scope_as = character_other
	}

	# Operation
	trigger_if = {
		limit = {
			exists = this
			exists = scope:character_other
			trigger_character_is_married = yes
		}
		custom_tooltip = {
			text = trigger_character_is_married_to_tt
			AND = {
				var:scope_var_significant_other = scope:character_other
				scope:character_other.var:scope_var_significant_other = this
			}
		}
	}
	trigger_else = {
		custom_tooltip = {
			text = trigger_character_is_married_to_invalid_tt
			always = no
		}
	}
}
